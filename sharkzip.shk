################################################################################
### Copyright ##################################################################
## 
## Copyright 2022 Daniel Alvarez <shogundevel@gmail.com>
## 
## Permission is hereby granted, free of charge, to any person
## obtaining a copy of this software and associated documentation files
## (the "Software"), to deal in the Software without restriction,
## including without limitation the rights to use, copy, modify, merge,
## publish, distribute, sublicense, and/or sell copies of the Software,
## and to permit persons to whom the Software is furnished to do so,
## subject to the following conditions:
## 
## The above copyright notice and this permission notice shall be
## included in all copies or substantial portions of the Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
## EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
## MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
## IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
## CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
## TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
## SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
## 
################################################################################

import system.io: puts, printf, open
import system.path: join, listdir, mkdir
import system.util: pop
import system.string: encode, decode

var OBJECT_NULL     = 0
var OBJECT_DIR      = 1
var OBJECT_FILE     = 2

function read_file(buffer, name, file)
    var name_data = encode(name)
    buffer.put(name_data.tell())
    buffer.puts(name_data)
    while true do
        var file_data = file.read(255)
        buffer.put(file_data.tell())
        buffer.puts(file_data)
        if file_data.tell() != 255 then
            break
    file.close()

function read_dir(buffer, name, path)
    var name_data = encode(name)
    buffer.put(name_data.tell())
    buffer.puts(name_data)
    var dir_data = listdir(path)
    if dir_data == null then
        printf("can't process file or directory '%'.", [path])
        buffer.put(OBJECT_NULL)
        return
    for child_name in dir_data do
        if child_name == "." or child_name == ".." then
            continue
        var child_path = join(path, child_name)
        var file = open(child_path, "rb")
        if file == null then
            buffer.put(OBJECT_DIR)
            read_dir(buffer, child_name, child_path)
        else
            buffer.put(OBJECT_FILE)
            read_file(buffer, child_name, file)
    buffer.put(OBJECT_NULL)

function zip(source, target)
    var output = open(target, "wb")
    if output == null then
        printf("can't open output file '%' for writting, operation aborted.", [target])
        return
    read_dir(output, "root", source)
    output.close()

function write_file(input, file, path)
    while true do
        var chunk_size = input.fetch()
        file.puts(input.read(chunk_size))
        if chunk_size != 255 then
            break
    file.close()

function write_dir(input, target)
    while true do
        var object_type = input.fetch()
        if object_type == OBJECT_NULL then
            return
        var name_size = input.fetch()
        var name_data = input.read(name_size)
        var name = decode(name_data)
        var path = join(target, name)
        if object_type == OBJECT_FILE then
            var file = open(path, "wb")
            write_file(input, file, path)
        else if object_type == OBJECT_DIR then
            mkdir(path)
            write_dir(input, path)
        else
            puts("warning: the input file seems corrupted.\n")
            return

function unzip(input, target)
    input.read(5)
    mkdir(target)
    write_dir(input, target)
    input.close()

function main(args)
    if sizeof(args) != 3 then
        puts("usage: zip <source> <target>\n")
        puts("\tzip/unzip a file or directory using sharkzip algorithm.\n")
        puts("\tif <source> points to a file, it will be interpreted as a zipped file to be unzipped at <target>.\n")
        puts("\tif <source> is not a file a directory is assumed, and will be zipped into <target>\n")
        return
    var source = args[1]
    var target = args[2]
    var object = open(args[1], "rb")
    if object != null then
        unzip(object, target)
    else
        zip(source, target)
