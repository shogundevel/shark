
lexical analysis
================

hex_digit = '[0-9a-fA-F]'
hex_lit = '0(x|X)[hex_digit]+'
dec_lit = '0|([1-9]+[0-9]*)'

int_lit = ( hex_lit | dec_lit )
float_lit = '[dec_lit].[0-9]+' [ 'e|E' [ '-' ] dec_lit ]

escape = "\\."
char = '~[escape]'

char_lit = '\'(char|escape)\''
str_lit = '\"(char|escape)*\"'

name = '[a-zA-Z_]+[0-9a-zA-Z_]*'

EOL = ';' | '\n'
SEOL = [ '\n' ]

indent
dedent

top level
=========

source_file = { import } { decl }

import_path = name { '.' name }
import = "import" import_path [ ( "->" name ) | ( ':' name { ',' name } ) ] EOL

decl = class
     | var
     | function
     | statement

type definition
===============

class = "class" name [ '(' custom_type ')' ] EOL class_body
class_body = indent ( pass | { var | function } ) dedent
pass = "pass" EOL

variables
=========

var = "var" name [ '=' exp ] EOL

functions
=========

function = "function" name args EOL [ indented_block ]
args = '(' [ name { ',' name } ] ')'

types
=====

type = path
path = name { '::' name }

statements
==========

block = simple_statement | indented_block
indented_block = SEOL indent ( pass | { var | statement } ) dedent

statement = if
          | while
          | for
          | simple_statement

conditional branches
--------------------

if = "if" exp "then" block [ "else" ( if | block ) ]

loops
-----

while = "while" exp "do" block
for = "for" name "in" iter_exp "do" block
iter_exp = exp | "range" '(' exp [ ',' exp ] ')'

simple statements
-----------------

simple_statement = break
                 | continue
                 | return
                 | assign_stat

break = "break" EOL
continue = "continue" EOL
return = "return" [ exp ] EOL

assign_stat = assign EOL
assign = exp [ ( "<<" exp ) | ( assign_op exp ) ]

assign_op = '='
          | '*=' | '/=' | '%='
          | '+=' | '-='

expressions
===========

binary_op = unary_op
          | binary_op ( '*' | '/' | '%'
                      > '+' | '-'
                      > '<' | '<=' | '>' | '>='
                      > '==' | '!=' | [ "not" ] "in"
                      > "and"
                      > "or" ) unary_op

unary_op = post_op
         | ( "not"
           | "-" ) post_op

post_op = primary_exp
        | post_op ( '(' [ exp { ',' exp } ] ')'
                  | '[' exp [ ':' exp ] ']'
                  | '.' name )

primary_exp = literal
            | path
            | "self"
            | "super" '(' [ exp { ',' exp } ] ')'
            | "sizeof" '(' exp ')'
            | "new" type [ '(' [ exp { ',' exp } ] ')' ]
            | "instanceof" '(' exp ',' type ')'
            | '[' [ exp { ',' exp } ] ']'
            | '{' [ exp [ ':' exp ] { ',' exp [ ':' exp ] } ] '}'
            | '(' exp ')'

literal = "null"
        | "true"
        | "false"
        | int_lit
        | float_lit
        | char_lit
        | str_lit

exp = binary_op
