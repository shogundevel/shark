###############################################################################
### Copyright #################################################################
## 
## Copyright 2022 Daniel Alvarez <shogundevel@gmail.com>
## 
## Permission is hereby granted, free of charge, to any person
## obtaining a copy of this software and associated documentation files
## (the "Software"), to deal in the Software without restriction,
## including without limitation the rights to use, copy, modify, merge,
## publish, distribute, sublicense, and/or sell copies of the Software,
## and to permit persons to whom the Software is furnished to do so,
## subject to the following conditions:
## 
## The above copyright notice and this permission notice shall be
## included in all copies or substantial portions of the Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
## EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
## MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
## IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
## CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
## TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
## SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
## 
###############################################################################

import "system/string.api"

import "shark_lexer.api"
import "shark_backend.api"

var shark_compiler_op_priority: strmap

function shark_compiler_init()

class shark_compiler (object)
    var include: list
    var backend: shark_backend
    
    var import_record: strmap
    var namespace: shark_namespace
    var source_context: str
    var lexer: shark_lexer
    var token: shark_token
    var errbuf: strbuf
    
    var type_context: shark_custom_type
    var function_context: shark_function
    var context: shark_namespace; 
    
    var in_type: bool
    var in_impl: bool
    var in_function: bool
    var in_loop: bool
    var assign_target: bool
    var assign_op: str
    
    var arg_names: list
    var arg_types: list
    var else_if: bool
    
    var exp_type: shark_type
    var callee: shark_function
    
    function shark_compiler()
    function compile(filename: str, include: list, backend: shark_backend, out: str)
    
    function write_error(data: str)
    function error()
    
    function next() -> str
    function match(value: str) -> bool
    function consume(type: str) -> str
    function expect(value: str)
    function eol()
    function seol()
    function match_indent() -> bool
    function match_dedent() -> bool
    function indent()
    function dedent(lineno: int)
    function at_end() -> bool
    
    function source_file()
    function decl() -> bool
    function import_decl() -> bool
    function import_path() -> str
    
    function basic_type() -> shark_type
    function custom_type() -> shark_type
    function type() -> shark_type
    
    function typedef_decl() -> bool
    function var_decl() -> bool
    function function_decl() -> bool
    function args()
    function function_equals(xargs: list, yargs: list, xtype: shark_type, ytype: shark_type) -> bool
    function inline_stat() -> bool
    
    function block()
    function do_block(context: shark_namespace)
    function statement() -> bool
    function assign_stat() -> bool
    function assign() -> bool
    function match_inc() -> bool
    function match_assign() -> bool
    
    function binary_op(priority: int) -> bool
    function unary_op() -> bool
    function post_op() -> bool
    function call_args()
    function primary_exp() -> bool
    function literal() -> bool
    
    function optional_exp() -> bool
    function exp()
