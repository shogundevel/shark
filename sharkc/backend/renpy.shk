###############################################################################
### Copyright ##################################################################
## 
## Copyright 2022 Daniel Alvarez <shogundevel@gmail.com>
## 
## Permission is hereby granted, free of charge, to any person
## obtaining a copy of this software and associated documentation files
## (the "Software"), to deal in the Software without restriction,
## including without limitation the rights to use, copy, modify, merge,
## publish, distribute, sublicense, and/or sell copies of the Software,
## and to permit persons to whom the Software is furnished to do so,
## subject to the following conditions:
## 
## The above copyright notice and this permission notice shall be
## included in all copies or substantial portions of the Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
## EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
## MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
## IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
## CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
## TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
## SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
## 
################################################################################

import system.path
import system.string: strbuf, concat, join, format
import system.io: open
import system.util

import sharkc.error: compiler_error
import sharkc.backend.python: python_generator

class renpy_generator (python_generator)
    function start(compiler, filename, out)
        self.compiler = compiler
        compiler.backend = self
        self.out = open(out, "w")
        if self.out == null then
            compiler_error(format("can't open file '%' for writing, compilation aborted.", [out_filename]))
        self.out.puts("init python:\n")
        self.out.printf("    __MAIN__ = '%'\n", [path::remove_ext(path::get_tail(filename))])
        self.enter_module(path::remove_ext(path::get_tail(filename)))
    
    function close()
        self.exit_module()
        self.out.close()
    
    function enter_module(import_path)
        self.indent()
        super(import_path)
    
    function begin_source(import_path)
        var generator = new renpy_generator ()
        generator.compiler = self.compiler
        generator.compiler.backend = generator
        generator.parent = self
        generator.out = self.out
        generator.enter_module(join(".", import_path))
    
    function super_call()
        self.exp = format("super(%, self).%(%)", [
            format("__%_parent__", [self.class_context]),
            self.function_context,
            join(", ", self.call_args)])
        self.exit_call()
