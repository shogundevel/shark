###############################################################################
### Copyright ##################################################################
## 
## Copyright 2022 Daniel Alvarez <shogundevel@gmail.com>
## 
## Permission is hereby granted, free of charge, to any person
## obtaining a copy of this software and associated documentation files
## (the "Software"), to deal in the Software without restriction,
## including without limitation the rights to use, copy, modify, merge,
## publish, distribute, sublicense, and/or sell copies of the Software,
## and to permit persons to whom the Software is furnished to do so,
## subject to the following conditions:
## 
## The above copyright notice and this permission notice shall be
## included in all copies or substantial portions of the Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
## EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
## MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
## IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
## CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
## TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
## SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
## 
################################################################################

import shark.asset
import shark.event

var main = null
var document
var Math
var pending_draw_op = [ ]
var pressed = false

function on_mouse_down(ev)
    pressed = true
    if ev.clientX then
        main.event(event::E_PRESS, (ev.clientX - context_border_x) / context_size_x, (ev.clientY - context_border_y) / context_size_y)
    else
        main.event(event::E_PRESS, (ev.screenX - context_border_x) / context_size_x, (ev.screenY - context_border_y) / context_size_y)

function on_mouse_up(ev)
    pressed = false
    if ev.clientX then
        main.event(event::E_RELEASE, (ev.clientX - context_border_x) / context_size_x, (ev.clientY - context_border_y) / context_size_y)
    else
        main.event(event::E_RELEASE, (ev.screenX - context_border_x) / context_size_x, (ev.screenY - context_border_y) / context_size_y)

function on_mouse_move(ev)
    if pressed then
        if ev.clientX then
            main.event(event::E_MOVE, (ev.clientX - context_border_x) / context_size_x, (ev.clientY - context_border_y) / context_size_y)
        else
            main.event(event::E_MOVE, (ev.screenX - context_border_x) / context_size_x, (ev.screenY - context_border_y) / context_size_y)

function on_touch_down(ev)
    ev.preventDefault()
    ev = ev.changedTouches[ev.changedTouches.length - 1]
    pressed = true
    if ev.clientX then
        main.event(event::E_PRESS, (ev.clientX - context_border_x) / context_size_x, (ev.clientY - context_border_y) / context_size_y)
    else
        main.event(event::E_PRESS, (ev.screenX - context_border_x) / context_size_x, (ev.screenY - context_border_y) / context_size_y)

function on_touch_up(ev)
    ev.preventDefault()
    ev = ev.changedTouches[ev.changedTouches.length - 1]
    pressed = false
    if ev.clientX then
        main.event(event::E_RELEASE, (ev.clientX - context_border_x) / context_size_x, (ev.clientY - context_border_y) / context_size_y)
    else
        main.event(event::E_RELEASE, (ev.screenX - context_border_x) / context_size_x, (ev.screenY - context_border_y) / context_size_y)

function on_touch_move(ev)
    ev.preventDefault()
    ev = ev.changedTouches[ev.changedTouches.length - 1]
    if pressed then
        if ev.clientX then
            main.event(event::E_MOVE, (ev.clientX - context_border_x) / context_size_x, (ev.clientY - context_border_y) / context_size_y)
        else
            main.event(event::E_MOVE, (ev.screenX - context_border_x) / context_size_x, (ev.screenY - context_border_y) / context_size_y)

var console

function on_key_down(ev)
    # ev.code
    if ev.code == "ArrowUp" then
        main.event(event::E_PRESS_UP, 0, 0)
    else if ev.code == "ArrowDown" then
        main.event(event::E_PRESS_DOWN, 0, 0)
    else if ev.code == "ArrowLeft" then
        main.event(event::E_PRESS_LEFT, 0, 0)
    else if ev.code == "ArrowRight" then
        main.event(event::E_PRESS_RIGHT, 0, 0)
    else if ev.code == "KeyZ" then
        main.event(event::E_PRESS_X, 0, 0)
    else if ev.code == "KeyX" then
        main.event(event::E_PRESS_Y, 0, 0)
    # ev.keyCode
    else if ev.keyCode == 38 then
        main.event(event::E_PRESS_UP, 0, 0)
    else if ev.keyCode == 40 then
        main.event(event::E_PRESS_DOWN, 0, 0)
    else if ev.keyCode == 37 then
        main.event(event::E_PRESS_LEFT, 0, 0)
    else if ev.keyCode == 39 then
        main.event(event::E_PRESS_RIGHT, 0, 0)
    else if ev.keyCode == 90 then
        main.event(event::E_PRESS_X, 0, 0)
    else if ev.keyCode == 88 then
        main.event(event::E_PRESS_Y, 0, 0)
    else
        return
    ev.preventDefault()

function on_key_up(ev)
    # ev.code
    if ev.code == "ArrowUp" then
        main.event(event::E_REL_UP, 0, 0)
    else if ev.code == "ArrowDown" then
        main.event(event::E_REL_DOWN, 0, 0)
    else if ev.code == "ArrowLeft" then
        main.event(event::E_REL_LEFT, 0, 0)
    else if ev.code == "ArrowRight" then
        main.event(event::E_REL_RIGHT, 0, 0)
    else if ev.code == "KeyZ" then
        main.event(event::E_REL_X, 0, 0)
    else if ev.code == "KeyX" then
        main.event(event::E_REL_Y, 0, 0)
    # ev.keyCode
    else if ev.keyCode == 38 then
        main.event(event::E_REL_UP, 0, 0)
    else if ev.keyCode == 40 then
        main.event(event::E_REL_DOWN, 0, 0)
    else if ev.keyCode == 37 then
        main.event(event::E_REL_LEFT, 0, 0)
    else if ev.keyCode == 39 then
        main.event(event::E_REL_RIGHT, 0, 0)
    else if ev.keyCode == 90 then
        main.event(event::E_REL_X, 0, 0)
    else if ev.keyCode == 88 then
        main.event(event::E_REL_Y, 0, 0)
    else
        return
    ev.preventDefault()

var window
var element = null
var context = null
var context_size_x = 1
var context_size_y = 1
var context_size_z = 1
var context_border_x = 0
var context_border_y = 0

function set_element_size()
    context.scale(1 / context_size_z, 1 / context_size_z)
    context.translate(-context_border_x, -context_border_y)
    element.width = window.innerWidth
    element.height = window.innerHeight
    context_size_x = element.width / 320
    context_size_y = element.height / 192
    if context_size_x > context_size_y then
        context_size_z = context_size_y
        context_border_x = (element.width - 320 * context_size_y) / 2
        context_border_y = 0
    else if context_size_y > context_size_x then
        context_size_z = context_size_x
        context_border_x = 0
        context_border_y = (element.height - 192 * context_size_x) / 2
    else
        context_size_z = context_size_x
        context_border_x = 0
        context_border_y = 0
    context.fillStyle = "black"
    context.fillRect(0, 0, element.width, element.height)
    context.translate(context_border_x, context_border_y)
    context.scale(context_size_z, context_size_z)
    context.textBaseline = "top"

class activity
    function init()
        element = document.getElementById("screen")
        context = element.getContext("2d")
        set_element_size()
        self.context = context
        self.context.textColor = "#000000FF"
        self.context.textBaseline = "top"
        window.addEventListener("resize", set_element_size, false)
        window.addEventListener("mousedown", on_mouse_down, false)
        window.addEventListener("mouseup", on_mouse_up, false)
        window.addEventListener("mousemove", on_mouse_move, false)
        window.addEventListener("touchstart", on_touch_down, false)
        window.addEventListener("touchend", on_touch_up, false)
        window.addEventListener("touchmove", on_touch_move, false)
        window.addEventListener("keyup", on_key_up, false)
        window.addEventListener("keydown", on_key_down, false)
    
    function draw(text, x, y)
        if asset::__pending_images == 0 then
            self.__do_draw(text, x, y)
        else
            pending_draw_op << [text, x, y]
    
    function draw_ex(text, x, y, origin_x, origin_y, rotation, scale_x, scale_y)
        if asset::__pending_images == 0 then
            self.__do_draw_ex(text, x, y, origin_x, origin_y, rotation, scale_x, scale_y)
        else
            pending_draw_op << [text, x, y, origin_x, origin_y, rotation, scale_x, scale_y]
    
    function draw_text(text, font, x, y)
        if asset::__pending_images == 0 then
            self.__do_draw_text(text, font, x, y)
        else
            pending_draw_op << [text, font, x, y]
    
    function __do_draw(text, x, y)
        self.context.drawImage(text.image_data, x, y)
    
    function __do_draw_ex(text, x, y, origin_x, origin_y, rotation, scale_x, scale_y)
        self.context.save()
        self.context.translate(x, y)
        self.context.translate(origin_x, origin_y)
        self.context.rotate(-rotation * Math.PI / 180)
        self.context.scale(scale_x, scale_y)
        self.context.drawImage(text.image_data, -text.image_data.width / 2, -text.image_data.height / 2)
        self.context.restore()
    
    function __do_draw_text(text, font, x, y)
        self.context.font = font.size + "px verdana, sans-serif"
        self.context.fillText(text, x, y)
    
    function __render()
        if asset::__pending_images != 0 then
            pending_draw_op = [ ]
        else
            for draw_op in pending_draw_op do
                if sizeof(draw_op) == 3 then
                    self.__do_draw(draw_op[0], draw_op[1], draw_op[2])
                else if sizeof(draw_op) == 4 then
                    self.__do_draw_text(draw_op[0], draw_op[1], draw_op[2], draw_op[3])
                else
                    self.__do_draw_ex(draw_op[0], draw_op[1], draw_op[2], draw_op[3], draw_op[4], draw_op[5], draw_op[6], draw_op[7])
    
    function launch()
        pass
    
    function event(type, x, y)
        pass
    
    function update()
        pass
    
    function render()
        pass
