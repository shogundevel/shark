################################################################################
### Copyright ##################################################################
## 
## Copyright 2022 Daniel Alvarez <shogundevel@gmail.com>
## 
## Permission is hereby granted, free of charge, to any person
## obtaining a copy of this software and associated documentation files
## (the "Software"), to deal in the Software without restriction,
## including without limitation the rights to use, copy, modify, merge,
## publish, distribute, sublicense, and/or sell copies of the Software,
## and to permit persons to whom the Software is furnished to do so,
## subject to the following conditions:
## 
## The above copyright notice and this permission notice shall be
## included in all copies or substantial portions of the Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
## EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
## MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
## IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
## CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
## TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
## SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
## 
################################################################################

import system.io: puts, printf, open
import system.exit -> libexit
import system.path
import system.string
import system.util

function mkdir(args)
    if sizeof(args) != 2 then
        puts("usage: mkdir <dir>\n\tcreates the directory <dir>\n")
        return
    path::mkdir(args[1])

function rmdir(args)
    if sizeof(args) != 2 then
        puts("usage: rmdir <dir>\n\tremoves the (empty) directory <dir>\n")
        return
    path::rmdir(args[1])

function unlink(args)
    if sizeof(args) != 2 then
        puts("usage: unlink <filename>\n\tunlinks (deletes) <filename>\n")
        return
    path::unlink(args[1])

function system(args)
    if sizeof(args) <= 1 then
        puts("usage: system <command> <args>\n\texecutes <command> in the host system command line interface\n")
        return
    path::system(string::join(" ", util::slice(args, 1, sizeof(args))))

function exit(args)
    libexit::exit(libexit::SUCCESS)

function echo(args)
    printf("%\n", [string::join(" ", util::slice(args, 1, sizeof(args)))])

function install(args)
    if sizeof(args) != 2 then
        puts("usage: install <filename>\n\tinstalls a file locally, so it can be cloned later.")
        return
    var base = path::get_base(args[0])
    var origin = args[1]
    var source = open(origin, "rb")
    if source == null then
        printf("can't open input file '%'.", [origin])
        return
    var lib = path::join(base, "lib")
    path::mkdir(lib)
    var install_path = path::join(lib, path::get_tail(origin))
    var output = open(install_path, "wb")
    while not source.at_end() do
        output.puts(source.read(256))

function clone(args)
    if sizeof(args) != 3 then
        puts("usage: clone <source> <target>\n\tclones a file from the local repository.")
        return
    var base = path::get_base(args[0])
    var origin = path::join(path::join(base, "libs"), args[1])
    var target = args[2]
    var source = open(origin, "rb")
    if source == null then
        printf("in clone operation: can't open requested file '%'.", [origin])
        return
    var output = open(target, "wb")
    if output == null then
        printf("in clone operation: can't reach <target> file '%', operation aborted.", [target])
    while not source.at_end() do
        output.puts(source.read(256))
