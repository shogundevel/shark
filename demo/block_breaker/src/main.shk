
import shark.activity: activity
import shark.asset
import shark.event
import shark.persistent

import system.math
import system.util: copy
import system.string: format, stoi, itos

import system.io: puts, printf

var black_bar = asset::load_texture("black_bar.png")
var black_ball = asset::load_texture("black_ball.png")

var square = asset::load_texture("square.png")
var bg = asset::load_texture("bg.png")
var font = asset::load_font("courier_new.ttf", 12, 0x0)
var main_screen_text = "Press any button to start a new game."

var W = 16
var H = 22

class main_activity (activity)
    function launch()
        self.left_down = false
        self.right_down = false
        self.down_down = false
        self.event_time = 0
        self.high_score = 0
        self.score = 0
        var save = persistent::get_save_file("r")
        if save != null then
            self.high_score = stoi(save.read(256))
            save.close()
        self.in_game = false
        self.enter_game()
    
    function new_game()
        if self.score > self.high_score then
            self.high_score = self.score
            var save = persistent::get_save_file("w")
            save.puts(itos(self.high_score))
            save.close()
        self.in_game = false
    
    function enter_game()
        self.in_game = true
        var line_data = [ ]
        for _ in range(W) do
            line_data << false
        self.board = [ ]
        for _ in range(H) do
            self.board << line_data
        self.score = 0
        self.bar_x = 136
        self.ball_x = 152
        self.ball_y = 168
        self.speed_x = 1
        self.speed_y = -1
        self.new_line()
        self.new_line()
    
    function new_line()
        for block in self.board[H - 1] do
            if block then
                self.new_game()
        var line = [ ]
        for _ in range(W) do
            line << true
        if self.ball_y <= 8 then
            line[math::floor((self.ball_x - 96) / 8)] = false
            self.score += 1
        for i in range(H - 1) do
            self.board[H - i - 1] = self.board[H - i - 2]
        self.board[0] = line
    
    function event(type, x, y)
        if not self.in_game then
            self.enter_game()
        else
            if type == event::E_PRESS_LEFT then
                self.left_down = true
            else if type == event::E_PRESS_RIGHT then
                self.right_down = true
            else if type == event::E_REL_LEFT then
                self.left_down = false
            else if type == event::E_REL_RIGHT then
                self.right_down = false
    
    function update()
        if self.in_game then
            if self.left_down then
                self.bar_x = math::max(self.bar_x - 8, 96)
            if self.right_down then
                self.bar_x = math::min(self.bar_x + 8, 176)
            self.ball_x += self.speed_x * 8
            self.ball_y += self.speed_y * 8
            if self.ball_x < 96 or self.ball_x > 216 then
                self.ball_x -= self.speed_x * 8
                self.speed_x = -self.speed_x
            if self.ball_y < 0 then
                self.ball_y -= self.speed_y * 8
                self.speed_y = -self.speed_y
            else if self.ball_y == 176 and self.ball_x >= self.bar_x and self.ball_x < self.bar_x + 48 then
                if self.left_down then
                    self.speed_x = -1
                else if self.right_down then
                    self.speed_x = 1
                self.ball_y -= self.speed_y * 8
                self.speed_y = -self.speed_y
            else if self.ball_y > 192 then
                self.new_game()
            while true do
                if (self.ball_x >= 104 and self.ball_y < 176 and self.speed_x == -1
                and self.board[math::floor(self.ball_y / 8)][math::floor((self.ball_x - 96) / 8) - 1]) then
                    self.board[math::floor(self.ball_y / 8)][math::floor((self.ball_x - 96) / 8) - 1] = false
                    self.score += 1
                    if self.score % 16 == 0 then self.new_line()
                    self.speed_x = -self.speed_x
                else if (self.ball_x < 216 and self.ball_y < 176 and self.speed_x == 1
                and self.board[math::floor(self.ball_y / 8)][math::floor((self.ball_x - 96) / 8) + 1]) then
                    self.board[math::floor(self.ball_y / 8)][math::floor((self.ball_x - 96) / 8) + 1] = false
                    self.score += 1
                    if self.score % 16 == 0 then self.new_line()
                    self.speed_x = -self.speed_x
                else if (self.ball_y >= 8 and self.ball_y < 176 and self.speed_y == -1
                and self.board[math::floor(self.ball_y / 8) - 1][math::floor((self.ball_x - 96) / 8)]) then
                    self.board[math::floor(self.ball_y / 8) - 1][math::floor((self.ball_x - 96) / 8)] = false
                    self.score += 1
                    if self.score % 16 == 0 then self.new_line()
                    self.speed_y = -self.speed_y
                else if (self.ball_y < 168 and self.speed_y == 1
                and self.board[math::ceil(self.ball_y / 8) + 1][math::floor((self.ball_x - 96) / 8)]) then
                    self.board[math::ceil(self.ball_y / 8) + 1][math::floor((self.ball_x - 96) / 8)] = false
                    self.score += 1
                    if self.score % 16 == 0 then self.new_line()
                    self.speed_y = -self.speed_y
                else if (self.ball_x >= 104 and self.ball_y >= 8 and self.ball_y < 176
                and self.speed_x == -1 and self.speed_y == -1
                and self.board[math::floor(self.ball_y / 8) - 1][math::floor((self.ball_x - 96) / 8) - 1]) then
                    self.board[math::floor(self.ball_y / 8) - 1][math::floor((self.ball_x - 96) / 8) - 1] = false
                    self.score += 1
                    if self.score % 16 == 0 then self.new_line()
                    self.speed_x = -self.speed_x
                    self.speed_y = -self.speed_y
                    break
                else if (self.ball_x < 216 and self.ball_y >= 8 and self.ball_y < 176
                and self.speed_x == 1 and self.speed_y == -1
                and self.board[math::floor(self.ball_y / 8) - 1][math::floor((self.ball_x - 96) / 8) + 1]) then
                    self.board[math::floor(self.ball_y / 8) - 1][math::floor((self.ball_x - 96) / 8) + 1] = false
                    self.score += 1
                    if self.score % 16 == 0 then self.new_line()
                    self.speed_x = -self.speed_x
                    self.speed_y = -self.speed_y
                    break
                else if (self.ball_x >= 104 and self.ball_y < 168
                and self.speed_x == -1 and self.speed_y == 1
                and self.board[math::floor(self.ball_y / 8) + 1][math::floor((self.ball_x - 96) / 8) - 1]) then
                    self.board[math::floor(self.ball_y / 8) + 1][math::floor((self.ball_x - 96) / 8) - 1] = false
                    self.score += 1
                    if self.score % 16 == 0 then self.new_line()
                    self.speed_x = -self.speed_x
                    self.speed_y = -self.speed_y
                    break
                else if (self.ball_x < 216 and self.ball_y < 168
                and self.speed_x == 1 and self.speed_y == 1
                and self.board[math::floor(self.ball_y / 8) + 1][math::floor((self.ball_x - 96) / 8) + 1]) then
                    self.board[math::floor(self.ball_y / 8) + 1][math::floor((self.ball_x - 96) / 8) + 1] = false
                    self.score += 1
                    if self.score % 16 == 0 then self.new_line()
                    self.speed_x = -self.speed_x
                    self.speed_y = -self.speed_y
                    break
                else
                    break
    
    function render()
        self.draw(bg, 0, 0)
        if self.in_game then
            for y in range(sizeof(self.board)) do
                var horizontal = self.board[y]
                for x in range(sizeof(horizontal)) do
                    if horizontal[x] then
                        self.draw(square, 96 + x * 8, 0 + y * 8)
            self.draw_text(itos(self.score), font, 260, 90)
            self.draw(black_bar, self.bar_x, 176)
            self.draw(black_ball, self.ball_x, self.ball_y)
        else
            self.draw_text(main_screen_text, font, 40, 90)
            self.draw_text(format("score: %, high score %", [self.score, self.high_score]), font, 80, 106)
