
import "shark.api"
import "system.api"

var square: texture = null
var bg: texture = null
var cour: font = null

var W: int = 10
var H: int = 12
var EVENT_MAX: int = 3

var left_down: bool = false
var right_down: bool = false
var down_down: bool = false

var event_time: int = 0
var line_data: [][] bool = null
var piece_data: [][] bool = null
var piece_base: [][][][] bool = null
var score: int = 0
var speed: int = 0
var current_time: int = 0

var x: int = 0
var y: int = 0

var next_piece: int = 0
var next_rotation: int = 0
var current_piece: [][][] bool = null
var current_rotation: int = 0

function new_game()

function piece_line(x: bool, y: bool, z: bool, w: bool) -> [] bool
    var data: [] bool = new [4] bool
    data[0] = x
    data[1] = y
    data[2] = z
    data[3] = w
    return data

function piece_block(x: [] bool, y: [] bool, z: [] bool, w: [] bool) -> [][] bool
    var data: [][] bool = null
    if y == null then
        data = new [1][] bool
        data[0] = x
    else if z == null then
        data = new [2][] bool
        data[0] = x
        data[1] = y
    else if w == null then
        data = new [3][] bool
        data[0] = x
        data[1] = y
        data[2] = z
    else
        data = new [4][] bool
        data[0] = x
        data[1] = y
        data[2] = z
        data[3] = w
    return data

function piece(x: [][] bool, y: [][] bool, z: [][] bool, w: [][] bool) -> [][][] bool
    var data: [][][] bool = new [4][][] bool
    if y == null then
        data[0] = x
        data[1] = x
        data[2] = x
        data[3] = x
    else if z == null then
        data[0] = x
        data[1] = y
        data[2] = x
        data[3] = y
    else
        data[0] = x
        data[1] = y
        data[2] = z
        data[3] = w
    return data

function generate_piece_data()
    piece_base = new [7][][][] bool
    piece_base[0] = piece(
        piece_block(
            piece_line(true, true, false, false),
            piece_line(true, true, false, false),
            null, null
        ), null, null, null
    )
    piece_base[1] = piece(
        piece_block(
            piece_line(true, true, true, true),
            null, null, null
        ), piece_block(
            piece_line(true, false, false, false),
            piece_line(true, false, false, false),
            piece_line(true, false, false, false),
            piece_line(true, false, false, false)
        ), null, null
    )
    piece_base[2] = piece(
        piece_block(
            piece_line(true, true, false, false),
            piece_line(true, false, false, false),
            piece_line(true, false, false, false),
            null
        ), piece_block(
            piece_line(true, false, false, false),
            piece_line(true, true, true, false),
            null, null
        ), piece_block(
            piece_line(false, true, false, false),
            piece_line(false, true, false, false),
            piece_line(true, true, false, false),
            null
        ), piece_block(
            piece_line(true, true, true, false),
            piece_line(false, false, true, false),
            null, null
        )
    )
    piece_base[3] = piece(
        piece_block(
            piece_line(true, true, false, false),
            piece_line(false, true, false, false),
            piece_line(false, true, false, false),
            null
        ), piece_block(
            piece_line(true, true, true, false),
            piece_line(true, false, false, false),
            null, null
        ), piece_block(
            piece_line(true, false, false, false),
            piece_line(true, false, false, false),
            piece_line(true, true, false, false),
            null
        ), piece_block(
            piece_line(false, false, true, false),
            piece_line(true, true, true, false),
            null, null
        )
    )
    piece_base[4] = piece(
        piece_block(
            piece_line(false, true, false, false),
            piece_line(true, true, true, false),
            null, null
        ), piece_block(
            piece_line(false, true, false, false),
            piece_line(true, true, false, false),
            piece_line(false, true, false, false),
            null
        ), piece_block(
            piece_line(true, true, true, false),
            piece_line(false, true, false, false),
            null, null
        ), piece_block(
            piece_line(true, false, false, false),
            piece_line(true, true, false, false),
            piece_line(true, false, false, false),
            null
        )
    )
    piece_base[5] = piece(
        piece_block(
            piece_line(true, false, false, false),
            piece_line(true, true, false, false),
            piece_line(false, true, false, false),
            null
        ), piece_block(
            piece_line(false, true, true, false),
            piece_line(true, true, false, false),
            null, null
        ), null, null
    )
    piece_base[6] = piece(
        piece_block(
            piece_line(false, true, false, false),
            piece_line(true, true, false, false),
            piece_line(true, false, false, false),
            null
        ), piece_block(
            piece_line(true, true, false, false),
            piece_line(false, true, true, false),
            null, null
        ), null, null
    )

function launch()
    square = load_texture("square.bmp")
    bg = load_texture("bg.bmp")
    cour = load_font("courier_new.ttf", 12, 255)
    generate_piece_data()
    new_game()

function new_piece()

function new_game()
    line_data = line_data # fixup
    if line_data != null then
        for x to W do
            free(line_data[x])
        free(line_data)
    line_data = new [W][] bool
    for x to W do
        var line_data_x: [] bool = new [H] bool
        for y to H do
            line_data_x[y] = false
        line_data[x] = line_data_x
    next_piece = random(sizeof(piece_base))
    next_rotation = random(4)
    new_piece()
    score = 0
    speed = 24
    current_time = 0

function collision() -> bool

function new_piece()
    next_piece = next_piece # fixup
    next_rotation = next_rotation # fixup
    current_piece = piece_base[next_piece]
    current_rotation = next_rotation
    piece_data = current_piece[next_rotation]
    next_piece = random(sizeof(piece_base))
    next_rotation = random(4)
    x = random(sizeof(line_data) - 4)
    y = 0
    if collision() then
        new_game()

function rotate()
function move(dx: int, dy: int) -> bool

var touch_w: bool = false
var touch_x: int = 0
var touch_y: int = 0

function event(type: int, x: int, y: int)
    if type == E_PRESS then
        touch_w = true
        touch_x = x
        touch_y = y
    else if type == E_RELEASE then
        if touch_x == x and touch_y == y then
            rotate()
        touch_w = false
    else if type == E_MOVE and touch_w then
        var move_x: int = x - touch_x
        var move_y: int = y - touch_y
        if move_x < -16 then
            move(-1, 0)
            touch_x -= 16
        else if move_x > 16 then
            move(1, 0)
            touch_x += 16
        else if move_y > 16 then
            move(0, 1)
            touch_y += 16
    else if type == E_PRESS_LEFT then
        left_down = true
        event_time = EVENT_MAX
    else if type == E_PRESS_RIGHT then
        right_down = true
        event_time = EVENT_MAX
    else if type == E_PRESS_DOWN then
        down_down = true
    else if type == E_REL_LEFT then
        left_down = false
    else if type == E_REL_RIGHT then
        right_down = false
    else if type == E_REL_DOWN then
        down_down = false
    else if type == E_REL_UP then
        rotate()

function advance()

function update()
    current_time += 1
    event_time += 1
    if event_time >= EVENT_MAX then
        event_time -= EVENT_MAX
        if left_down then
            move(-1, 0)
        if right_down then
            move(1, 0)
        if down_down then
            move(0, 1)
    if down_down then
        move(0, 1)
    if current_time >= speed then
        current_time -= speed
        advance()

function freeze()

function advance()
    if not move(0, 1) then
        freeze()
        new_piece()

function move(dx: int, dy: int) -> bool
    x += dx
    y += dy
    var collide: bool = collision()
    if collide then
        x -= dx
        y -= dy
        return false
    else
        return true

function rotate()
    current_rotation = current_rotation # fixup
    piece_data = piece_data # fixup
    
    var prev_rotation: int = current_rotation
    var prev_piece_data: [][] bool = piece_data
    
    current_rotation = (current_rotation + 1) % 4
    piece_data = current_piece[current_rotation]
    
    if collision() then
        current_rotation = prev_rotation
        piece_data = prev_piece_data

function collision() -> bool
    if x < 0 then
        return true
    var shape: [][] bool = piece_data
    for dx to sizeof(shape) do
        var vertical: [] bool = shape[dx]
        for dy to sizeof(vertical) do
            if vertical[dy] then
                if W <= x + dx then
                    return true
                if H <= y + dy then
                    return true
                var line_data_x: [] bool = line_data[x + dx]
                if line_data_x[y + dy] then
                    return true
    return false

function clear_lines()

function freeze()
    var shape: [][] bool = piece_data
    for dx to sizeof(shape) do
        var vertical: [] bool = shape[dx]
        var line_data_x: [] bool = line_data[x + dx]
        for dy to sizeof(vertical) do
            if vertical[dy] then
                line_data_x[y + dy] = true
    clear_lines()

function clear_lines()
    for dy to H do
        var clear: bool = true
        for dx to W do
            var line_data_x: [] bool = line_data[dx]
            if not line_data_x[dy] then
                clear = false
                break
        if clear then
            score += 1
            for dx to W do
                var line_data_x: [] bool = line_data[dx]
                var dz: int = dy
                while dz > 0 do
                    line_data_x[dz] = line_data_x[dz - 1]
                    dz -= 1
                line_data_x[0] = false
            if 24 - score < 8 then
                speed = 8
            else
                speed = 24 - score

function render()
    draw(bg, 0, 0)
    for dx to sizeof(line_data) do
        var vertical: [] bool = line_data[dx]
        for dy to sizeof(vertical) do
            if vertical[dy] then
                draw(square, 80 + dx * 16, 0 + dy * 16)
    var data: [][] bool = piece_data
    for dx to sizeof(data) do
        var vertical: [] bool = data[dx]
        for dy to sizeof(vertical) do
            if vertical[dy] then
                draw(square, 80 + (x + dx) * 16, 0 + (y + dy) * 16)
    var text: str = itos(score)
    draw_text(text, cour, 260, 90)
    free(text)
