###############################################################################
### Copyright ##################################################################
## 
## Copyright 2022 Daniel Alvarez <shogundevel@gmail.com>
## 
## Permission is hereby granted, free of charge, to any person
## obtaining a copy of this software and associated documentation files
## (the "Software"), to deal in the Software without restriction,
## including without limitation the rights to use, copy, modify, merge,
## publish, distribute, sublicense, and/or sell copies of the Software,
## and to permit persons to whom the Software is furnished to do so,
## subject to the following conditions:
## 
## The above copyright notice and this permission notice shall be
## included in all copies or substantial portions of the Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
## EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
## MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
## IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
## CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
## TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
## SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
## 
################################################################################

import system.io: puts
import system.util: update

class runtime_state
    function init(code, library)
        self.module_record = code
        self.import_record = library
        self.module_context = null
        self.class_context = null
        self.context = null
        self.self_object = null
        self.return_flag = false
        self.return_value = null
        self.break_flag = false
        self.continue_flag = false
    
    function import_module(import_path)
        if import_path in self.import_record then
            return self.import_record[import_path]
        else if import_path in self.module_record then
            var module = self.module_record[import_path].run(self)
            self.import_record[import_path] = module
            return module
        else
            pass # raise error

class block_object
    function init(parent)
        self.parent = parent
        self.namespace = { }

class typed_object
    function init(type)
        self.type = type

class module_object (typed_object)
    function init(import_path)
        self.type = "module"
        self.import_path = import_path
        self.namespace = { }

class function_object (typed_object)
    function init(context, name, args, impl, code)
        self.type = "function"
        self.context = context
        self.name = name
        self.args = args
        self.impl = impl
        self.code = code

class native_function_object (typed_object)
    function init(name, code)
        self.type = "native_function"
        self.name = name
        self.code = code

class class_object (typed_object)
    function init(name, parent)
        self.type = "class"
        self.name = name
        self.parent = parent
        self.namespace = { }
        self.create = null
        if parent != null then
            update(self.namespace, self.parent.namespace)

class object (typed_object)
    function init(class_type)
        self.type = "object"
        self.class_type = class_type
        self.namespace = { }

class native_object (typed_object)
    function init(class_type, child)
        self.type = "native_object"
        self.class_type = class_type
        self.child = child

class literal_object (typed_object)
    function init(type, value)
        self.type = type
        self.value = value
