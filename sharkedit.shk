################################################################################
### Copyright ##################################################################
## 
## Copyright 2022 Daniel Alvarez <shogundevel@gmail.com>
## 
## Permission is hereby granted, free of charge, to any person
## obtaining a copy of this software and associated documentation files
## (the "Software"), to deal in the Software without restriction,
## including without limitation the rights to use, copy, modify, merge,
## publish, distribute, sublicense, and/or sell copies of the Software,
## and to permit persons to whom the Software is furnished to do so,
## subject to the following conditions:
## 
## The above copyright notice and this permission notice shall be
## included in all copies or substantial portions of the Software.
## 
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
## EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
## MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
## IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
## CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
## TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
## SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
## 
################################################################################

import system.math
import system.string
import system.util
import system.path
import system.io

import shuriken.event
import shuriken.activity: activity
import shuriken.asset: load_image, load_font
import shuriken.render: color, render_solid, render_text

import sharkenv.core
import sharkenv.builtin

# styles

var icon_save = load_image("icon/icon_0001.bmp")
var icon_new = load_image("icon/icon_0003.bmp")
var icon_close = load_image("icon/icon_0004.bmp")
var icon_prev = load_image("icon/icon_0005.bmp")
var icon_next = load_image("icon/icon_0006.bmp")
var icon_more = load_image("icon/icon_0007.bmp")
var icon_doc = load_image("icon/icon_0008.bmp")
var icon_dir = load_image("icon/icon_0009.bmp")
var icon_open = load_image("icon/icon_0010.bmp")
var icon_reload = load_image("icon/icon_0011.bmp")
var icon_delete = load_image("icon/icon_0012.bmp")
var icon_accept = load_image("icon/icon_0013.bmp")
var icon_run = load_image("icon/icon_0014.bmp")
var icon_build = load_image("icon/icon_0015.bmp")

var font = load_font("courier_new.ttf", 12)
var sample = render_text(" ", font, 255)
var color_text = color(245, 245, 245, 255)
var color_keyword = color(147, 199, 99, 255)
var color_bg = color(41, 49, 52, 255)
var color_bg_2 = color(63, 75, 78, 255)

# console data/commands

var buffer = new string::strbuf ()

function puts(data)
    buffer.puts(data)

function printf(data, args)
    buffer.printf(data, args)

core::puts = puts
core::printf = printf

builtin::puts = puts
builtin::printf = printf

function echo(args)
    buffer.puts(string::join(" ", util::slice(args, 1, sizeof(args))))

var clear_flag = false

function clear(args)
    clear_flag = true

var open_filename = null
var open_file = null

function open(args)
    if sizeof(args) != 2 then
        puts("usage: open <filename>\n")
        puts("\tOpens <filename> for editing.")
        return
    open_filename = args[1]
    open_file = io::open(args[1], "r")
    if open_file == null then
        printf("can't open file '%' for editing.", [args[1]])

function list(args)
    var dir = "./"
    if sizeof(args) > 2 then
        puts("usage:\n\tlist\n\t\tlist the current directory.\n\tlist <dir>\n\t\tlist the <dir> directory.\n")
        return
    if sizeof(args) == 2 then
        dir = args[1]
    var list = path::listdir(dir)
    if list == null then
        printf("can't list directory '%'\n", [dir])
        return
    printf("Contents of '%':\n\t", [dir])
    for name in list do
        printf("%\n", [name])

function create(args)
    if sizeof(args) != 2 then
        puts("usage: new <name>\n\tCreates a new source file at <name>.")
        return
    var file = io::open(args[1], "w")
    if file == null then
        puts("failed to create new project.")
        return
    file.puts("\n# import required libraries\n")
    file.puts("import shuriken.event\n")
    file.puts("import shuriken.activity: activity\n")
    file.puts("import shuriken.asset: load_image, load_font\n")
    file.puts("import shuriken.render: color, render_solid, render_text\n")
    file.puts("\n# main activity\n")
    file.puts("class main_activity (activity)\n")
    file.puts("    function launch(size_x, size_y)\n        pass\n")
    file.puts("    function event(type, x, y, char)\n        pass\n")
    file.puts("    function update()\n        pass\n")
    file.puts("    function render()\n        pass\n")
    file.close()

function make(args)
    path::system(string::concat(
        "shark tool make ",
        string::join(" ", util::slice(args, 1, sizeof(args)))))

core::command_table["echo"] = echo
core::command_table["open"] = open
core::command_table["list"] = list
core::command_table["clear"] = clear
core::command_table["new"] = create
core::command_table["make"] = make

var keyword_list = string::split("import define class var const inline function bool int float char str object if then else select case while do for in break continue return and or not self sizeof new instanceof cast null true false", ' ')
var keyword_set = { }

for keyword in keyword_list do
    keyword_set[keyword] = true

function tokenize(d)
    var i = 0
    var l = string::len(d)
    var t = false
    var b = new string::strbuf ()
    var x = string::index
    var a = string::isalpha
    var r = [ ]
    
    for i in range(l) do
        var c = x(d, i)
        var k = a(c)
        if k == t then
            r << b.read_all()
            t = not k
        b.put(c)
    
    r << b.read_all()
    
    return r

class main_activity (activity)
    function launch(size_x, size_y)
        self.size_x = size_x
        self.size_y = size_y
        self.filename = null
        self.data = [ "" ]
        self.console = self.data
        self.save_flag = false
        self.save_file = null
        self.save_data = null
        self.surface = null
        self.dirty = true
        self.control_down = false
        self.cursor_x = 0
        self.cursor_y = 0
        self.viewport_x = 0
        self.viewport_y = 0
        self.code_x = math::floor(size_x / 4)
        self.code_y = 48
        self.line_count = math::floor((self.size_y - self.code_y - 16) / 12)
        self.char_count = math::floor((self.size_x - self.code_x - 48) / sample.get_size_x())
        self.cursor = render_solid(color_text, 1, 12)
        self.toolbar_icons = [icon_save, icon_run]
        self.update_toolbar("console, no project")
        self.set_current_dir("./")
        self.set_status("Entering sharkedit.")
        self.copy_buf = ""
        self.lineno_data = [ ]
        self.render_data = [ ]
        self.empty_line = render_text("", font, color_text)
        for _ in range(self.line_count) do
            self.lineno_data << sample
            self.render_data << sample
        self.start()
        self.focus_input()
        self.update_text()
    
    function set_status(text)
        self.status_text = text
        self.status_time = 0
        self.status_flag = true
    
    function update_toolbar(label)
        self.toolbar_label = label
        self.toolbar_render = render_solid(color_bg_2, self.size_x, 48)
        self.toolbar_render.draw(render_text(self.toolbar_label, font, color_text), 4, 4)
        for icon in range(sizeof(self.toolbar_icons)) do
            self.toolbar_render.draw(self.toolbar_icons[icon], 4 + icon * 24, 20)
    
    function set_current_dir(dir)
        var list = path::listdir(dir)
        if list == null then
            return
        self.current_dir = dir
        self.current_dir_list = list
        self.current_dir_cache = [ ]
        for item in self.current_dir_list do
            self.current_dir_cache << render_text(item, font, color_text)
        self.current_dir_count = math::floor((self.size_y - 48 - 32 - 20 - 16) / 12)
        self.current_dir_page = 0
        self.current_dir_label = render_text(dir, font, color_text)
        self.update_project_view()
    
    function update_project_view()
        self.project_view_render = render_solid(color_bg, self.code_x, self.size_y - 48)
        self.project_view_render.draw(icon_prev, 4, self.size_y - 48 - 44)
        self.project_view_render.draw(icon_next, 28, self.size_y - 48 - 44)
        self.project_view_render.draw(self.current_dir_label, 4, 4)
        var current_dir_offset = self.current_dir_page * self.current_dir_count
        for item in range(self.current_dir_count) do
            var id = current_dir_offset + item
            if id >= sizeof(self.current_dir_cache) then
                if item == 0 and self.current_dir_page > 0 then
                    self.current_dir_page -= 1
                    self.update_project_view()
                    return
                break
            self.project_view_render.draw(self.current_dir_cache[id], 8, 20 + 12 * item)
    
    function start()
        puts("Welcome to sharkedit, now running a custom sharkenv session:\n")
        puts("* type 'clear' to clear the console buffer.\n")
        puts("* type 'list' to list the current directory.\n")
        puts("* type 'list <dir>' to list the given directory.\n")
        puts("* type 'new <name>' to create a new shuriken project.\n")
        puts("* type 'open <filename>' to open and edit <filename>.\n")
        puts("* you can also type other standard sharkenv commands, incluiding 'make'!\n")
        puts("\nTo the left is a view of the current directory.\nYou can navigate directories and click a file to open it.\nClick the left and right arrow buttons in the directory view to advance and retrocede in the directory.\nClicking retrocede in the first page will go one directory back, clicking it in the projects root directory will refresh the view.\n")
        puts("\nWhen editing a file use the following keyboard shortcuts:\n")
        puts("* hit ctrl+s to save the current file.\n")
        puts("* hit ctrl+q to save the current file and quit editing.\n")
        puts("* hit ctrl+r to save and run the current file.\n")
        puts("* hit ctrl+x to quit editing without saving.\n")
        puts("* hit ctrl+c to copy the current line.\n")
        puts("* hit ctrl+v to paste the current line from copy buffer.\n")
        puts("* hit ctrl+p to swap between the console and the editing modes.\n")
        puts("\nNow you can enter a command to execute it:\n\n> ")
    
    function update()
        var data = buffer.read_all()
        if data != "" then
            if self.filename == null then
                self.cursor_y = sizeof(self.data) - 1
                self.cursor_x = string::len(self.data[self.cursor_y])
                self.filename = ""
                for index in range(string::len(data)) do
                    var c = string::index(data, index)
                    if c == '\t' then
                        self.insert_tab()
                    else if c == '\n' then
                        self.insert_line()
                    else
                        self.insert_symbol(c)
                    if string::len(self.data[sizeof(self.data) - 1]) >= self.char_count then
                        self.insert_line()
                self.filename = null
            else
                self.set_status(data)
        else if clear_flag then
            clear_flag = false
            self.data = [ "sharkedit, running custom sharkenv session:" ]
            self.console = self.data
            self.set_status("Cleared console buffer.")
            self.focus_input()
            self.update_text()
            return
        if self.status_time == 48 then
            self.status_text = ""
            self.status_flag = true
            self.status_time = 49
        else if self.status_time < 48 then
            self.status_time += 1
    
    function open(filename, file)
        self.update_toolbar(string::format("Project '%', file '%'", [
            path::get_base(filename),
            path::get_tail(filename)
        ]))
        var buf = new string::strbuf ()
        self.filename = filename
        while not file.at_end() do
            buf.puts(file.read(256))
        file.close()
        self.data = string::split(buf.read_all(), '\n')
        for index in range(sizeof(self.data)) do
            if string::len(self.data[index]) == 0 then
                continue
            if string::index(self.data[index], string::len(self.data[index]) - 1) == '\r' then
                self.data[index] = string::slice(self.data[index], 0, string::len(self.data[index]) - 1)
    
    function save()
        if self.filename != null then
            var out = io::open(self.filename, "w")
            out.puts(string::join("\n", self.data))
            out.close()
            self.set_status("saved current file")
    
    function run()
        if self.filename != null then
            self.save()
            self.set_status("running current file")
            var arch_file = string::concat(path::remove_ext(self.filename), ".shar")
            path::system(string::format("shark tool build % %", [self.filename, arch_file]))
            path::system(string::concat("shuriken ", arch_file))
            path::unlink(arch_file)
    
    function quit()
        self.update_toolbar("console, no project")
        self.filename = null
        self.data = self.console
        self.data << "> "
        self.focus_input()
        self.update_text()
    
    function move_left()
        self.cursor_x -= 1
        if self.filename == null and self.cursor_x < 2 then
            self.cursor_x = 2
        else if self.cursor_x < 0 then
            self.cursor_y -= 1
            if self.cursor_y < 0 then
                self.cursor_x = 0
                self.cursor_y = 0
            else
                self.cursor_x = string::len(self.data[self.cursor_y])
        self.center_cursor()
        self.update_text()
    
    function move_right()
        self.cursor_x += 1
        if self.cursor_x > string::len(self.data[self.cursor_y]) then
            self.cursor_y += 1
            if self.cursor_y >= sizeof(self.data) then
                self.cursor_x -= 1
                self.cursor_y -= 1
            else
                self.cursor_x = 0
        self.center_cursor()
        self.update_text()
    
    function move_up()
        if self.filename == null then
            return
        if self.cursor_y > 0 then
            self.cursor_y -= 1
            self.cursor_x = math::min(self.cursor_x, string::len(self.data[self.cursor_y]))
        self.center_cursor()
        self.update_text()
    
    function move_down()
        if self.filename == null then
            return
        if self.cursor_y < sizeof(self.data) - 1 then
            self.cursor_y += 1
            self.cursor_x = math::min(self.cursor_x, string::len(self.data[self.cursor_y]))
        self.center_cursor()
        self.update_text()
    
    function insert_symbol(symbol)
        var text = self.data[self.cursor_y]
        self.data[self.cursor_y] = string::format("%%%", [
            string::slice(text, 0, self.cursor_x),
            string::ctos(symbol),
            string::slice(text, self.cursor_x, string::len(text))])
        self.cursor_x += 1
        self.center_cursor()
        self.update_current()
    
    function insert_line()
        if self.filename == null then
            var data_size = sizeof(self.data)
            var command = self.data[sizeof(self.data) - 1]
            self.data << ""
            core::exec(string::slice(command, 2, sizeof(command)))
            if open_file != null then
                self.open(open_filename, open_file)
                open_filename = null
                open_file = null
                self.cursor_x = 0
                self.cursor_y = 0
                self.center_cursor()
                self.update_text()
                return
            self.update()
            if sizeof(self.data) == data_size and self.data[data_size - 1] == "" then
                self.data[data_size - 1] = "> "
            else
                self.data << "> "
            self.focus_input()
            self.update_text()
            return
        var text = self.data[self.cursor_y]
        var indent_size = 0
        while indent_size < string::len(text) and string::index(text, indent_size) == ' ' do
            indent_size += 1
        self.data[self.cursor_y] = string::concat(
            string::slice(text, 0, indent_size),
            string::slice(text, self.cursor_x, string::len(text)))
        self.data[self.cursor_y] << string::slice(text, 0, self.cursor_x)
        self.cursor_x = indent_size
        self.cursor_y += 1
        self.center_cursor()
        self.update_text()
    
    function insert_tab()
        var text = self.data[self.cursor_y]
        self.data[self.cursor_y] = string::format("%%%", [
            string::slice(text, 0, self.cursor_x),
            "    ",
            string::slice(text, self.cursor_x, string::len(text))])
        self.cursor_x += 4
        self.center_cursor()
        self.update_text()
    
    function remove_symbol()
        if self.filename == null and self.cursor_x <= 2 then
            return
        if self.cursor_x == 0 then
            if self.cursor_y == 0 then
                self.center_cursor()
                self.update_text()
            else
                self.cursor_y -= 1
                self.cursor_x = string::len(self.data[self.cursor_y])
                self.data[self.cursor_y] = string::concat(self.data[self.cursor_y], util::popindex(self.data, self.cursor_y + 1))
                self.center_cursor()
                self.update_text()
        else
            var text = self.data[self.cursor_y]
            self.data[self.cursor_y] = string::concat(
                string::slice(text, 0, self.cursor_x - 1),
                string::slice(text, self.cursor_x, string::len(text)))
            self.cursor_x -= 1
            self.center_cursor()
            self.update_text()
    
    function update_text()
        var max_y = math::min(sizeof(self.data), self.viewport_y + self.line_count)
        for line in range(self.viewport_y, max_y) do
            self.lineno_data[line - self.viewport_y] = render_text(string::itos(line + 1), font, color_text)
        for line in range(self.viewport_y, max_y) do
            self.render_data[line - self.viewport_y] = self.color_line(self.data[line])
        for line in range(max_y, self.viewport_y + self.line_count) do
            self.lineno_data[line - self.viewport_y] = sample
            self.render_data[line - self.viewport_y] = sample
        self.dirty = true
    
    function color_line(data)
        if data == "" then
            return self.empty_line
        var tokens = [ ]
        var data_size = 0
        for token in tokenize(data) do
            var render = null
            if token in keyword_set then
                render = render_text(token, font, color_keyword)
            else
                render = render_text(token, font, color_text)
            tokens << render
            data_size += render.get_size_x()
        var color_line = render_solid(color_bg, data_size, 14)
        var color_x = 0
        for token in tokens do
            color_line.draw(token, color_x, 0)
            color_x += token.get_size_x()
        return color_line
    
    function update_current()
        self.render_data[self.cursor_y - self.viewport_y] = render_text(self.data[self.cursor_y], font, color_text)
        self.dirty = true
    
    function focus_input()
        self.cursor_x = string::len(self.data[sizeof(self.data) - 1])
        self.cursor_y = sizeof(self.data) - 1
        self.center_cursor()
    
    function center_cursor()
        if self.cursor_x < self.viewport_x then
            self.viewport_x = self.cursor_x
        else if self.cursor_x >= self.viewport_x + self.char_count then
            self.viewport_x = self.cursor_x - self.char_count + 1
        if self.cursor_y < self.viewport_y then
            self.viewport_y = self.cursor_y
        else if self.cursor_y >= self.viewport_y + self.line_count then
            self.viewport_y = self.cursor_y - self.line_count + 1
    
    function render()
        if self.dirty then
            self.surface = render_solid(color_bg, self.size_x - self.code_x, self.size_y - self.code_y)
            var lineno_surf = render_solid(color_bg_2, 48, self.size_y - self.code_y)
            var lineno_y = 0
            for lineno in self.lineno_data do
                lineno_surf.draw(lineno, 48 - lineno.get_size_x() - 5, lineno_y)
                lineno_y += 12
            for line in range(self.line_count) do
                self.surface.draw(self.render_data[line], 48 - self.viewport_x * sample.get_size_x(), 12 * line)
            self.surface.draw(lineno_surf, 0, 0)
            self.dirty = false
            self.surface.draw(self.cursor,
                48 + sample.get_size_x() * (self.cursor_x - self.viewport_x),
                12 * (self.cursor_y - self.viewport_y))
        if self.status_flag then
            self.status_surf = render_solid(color_bg_2, self.size_x, 16)
            var status_text = render_text(self.status_text, font, color_text)
            self.status_surf.draw(status_text, 2, 2)
        self.draw(self.surface, self.code_x, self.code_y)
        self.draw(self.toolbar_render, 0, 0)
        self.draw(self.project_view_render, 0, 48)
        self.draw(self.status_surf, 0, self.size_y - 16)
    
    function event(type, x, y, char)
        if type == event::E_TEXT_DOWN then
            if self.control_down then
                if char == 's' then
                    self.save()
                if char == 'q' then
                    self.save()
                    self.quit()
                if char == 'r' then
                    self.save()
                    self.run()
                if char == 'x' then
                    self.quit()
                if char == 'p' then
                    if self.save_flag then
                        self.filename = self.save_file
                        self.data = self.save_data
                        self.save_file = null
                        self.save_data = null
                        self.save_flag = false
                        self.update_toolbar(string::format("Project '%', file '%'", [
                            path::get_base(self.filename),
                            path::get_tail(self.filename)
                        ]))
                    else if self.filename != null then
                        self.save_file = self.filename
                        self.save_data = self.data
                        self.quit()
                        self.save_flag = true
                        self.update_toolbar("console, no project")
                    else
                        self.set_status("No file to swap.")
                        return
                    self.focus_input()
                    self.update_text()
                if self.filename != null then
                    if char == 'c' then
                        self.copy_buf = self.data[self.cursor_y]
                        self.set_status("Copied line to buffer.")
                    if char == 'v' then
                        self.data[self.cursor_y] << self.copy_buf
                        self.cursor_y += 1
                        self.cursor_x = string::len(self.copy_buf)
                        self.center_cursor()
                        self.update_text()
                        self.set_status("Pasted line from buffer.")
            else if char == '\t' then
                self.insert_tab()
            else
                self.insert_symbol(char)
        else if type == event::E_PRESS then
            if y >= 20 and y < 44 then
                if x >= 4 and x < 4 + sizeof(self.toolbar_icons) * 24 then
                    var action = math::floor((x - 4) / 24)
                    if action == 0 then
                        self.save()
                    if action == 1 then
                        self.run()
            else if y >= 68 and y < 68 + 12 * self.current_dir_count then
                if x >= 8 and x < self.code_x then
                    var target = self.current_dir_page * self.current_dir_count + math::floor((y - 68) / 12)
                    if target >= sizeof(self.current_dir_list) then
                        return
                    var filename = self.current_dir_list[target]
                    var fullpath = path::join(self.current_dir, filename)
                    var file = io::open(fullpath, "r")
                    if file != null then
                        self.open(fullpath, file)
                        self.cursor_x = 0
                        self.cursor_y = 0
                        self.center_cursor()
                        self.update_text()
                        return
                    else if filename == "." then
                        self.set_current_dir(self.current_dir)
                        return
                    else if filename == ".." then
                        if self.current_dir != "./" then
                            var parent = path::get_base(self.current_dir)
                            if parent == "." then
                                parent = "./"
                            self.set_current_dir(parent)
                        return
                    else
                        self.set_current_dir(fullpath)
                        return
            else if y >= self.size_y - 44 and y < self.size_y - 20 then
                if x >= 4 and x < 52 then
                    var button = math::floor((x - 4) / 24)
                    if button == 0 then
                        if self.current_dir != "./" then
                            var base = path::get_base(self.current_dir)
                            if base == "." then
                                base = "./"
                            self.set_current_dir(base)
                        else
                            self.set_current_dir("./")
                    else
                        self.current_dir_page += 1
                        self.update_project_view()
        else if type == event::E_PRESS_CONTROL then
            self.control_down = true
        else if type == event::E_REL_CONTROL then
            self.control_down = false
        else if type == event::E_PRESS_BACK then
            self.remove_symbol()
        else if type == event::E_PRESS_ENTER then
            self.insert_line()
        else if type == event::E_PRESS_UP then
            self.move_up()
        else if type == event::E_PRESS_DOWN then
            self.move_down()
        else if type == event::E_PRESS_LEFT then
            self.move_left()
        else if type == event::E_PRESS_RIGHT then
            self.move_right()
        else if type == event::E_ROLL_UP then
            if self.filename == null then
                self.viewport_y = math::max(0, self.viewport_y - 10)
            else
                self.cursor_y = math::max(0, self.cursor_y - 10)
                self.center_cursor()
            self.update_text()
        else if type == event::E_ROLL_DOWN then
            if self.filename == null then
                self.viewport_y = math::min(math::max(0, sizeof(self.data) - self.line_count), self.viewport_y + 10)
            else
                self.cursor_y = math::min(sizeof(self.data) - 1, self.cursor_y + 10)
                self.center_cursor()
            self.update_text()
